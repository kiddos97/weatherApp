<View style={styles.container}>
    <View style={styles.windheader}>
        <Feather name="wind" size={20}/>
        <Text style = {styles.headingText}>
            Wind
        </Text>
    </View>
    <View style ={ styles.windspeed}>
        <View style ={styles.containerSpeed}>
            <Text style={styles.speed}>
                13
            </Text>
            </View>
        <View>
            <Text style={styles.text}>MPH</Text>
            <Text style={styles.text}>Wind</Text>
        </View>
    </View>
    <View style={styles.space}/>
    <View style ={ styles.windspeed}>
        <View style ={styles.containerSpeed}>
            <Text style={styles.speed}>
                27
            </Text>
            </View>
        <View>
            <Text style={styles.text}>MPH</Text>
            <Text style={styles.text}>Gust</Text>
        </View>
    </View>
    <View style={styles.imageContainer}>
          <Image
            source={require('../app/assets/compass.png')}
            style={{ width: 100, height: 100 }}
          />
        </View>
    </View>

    const styles = StyleSheet.create({
    container:{
        borderColor:'black',
        borderWidth:2,
        borderRadius:35,
        flexDirection: 'column', // Set flexDirection to row to arrange items horizontally
        alignItems: 'center', // Center items vertically

    },
    containerSpeed:{
        marginRight:20
    },
    headingText:{
        fontSize:15,
        fontWeight:'bold',
        marginLeft:10
    },
    windspeed:{
        flexDirection:'row',
        marginBottom:10
        
    },
    speed:{
        fontSize:35
    },
    space:{
        height:20
    },
    text:{
        fontSize:15,
        fontWeight:'bold'
    },
    windheader:{
        flexDirection:'row',
        marginRight:10,
        marginVertical:20
    },
    imageContainer:{
       marginLeft:'auto'
    }
})

   <NavigationContainer>
   <AuthNavigator/>
    </NavigationContainer>


    f95f8e5634ba4d229f8e5634baad22cb

    <Text style={styles.degrees}>{weatherData.main.temp}</Text>



const WeatherScreen = ({ navigation }) => {
    const [searchCity, setSearchCity] = useState('')
    const [weatherData, setWeatherData] = useState(null);
    const [location, setLocation] = useState();
    const [latitude, setLatitude] = useState('');
    const [longitude, setLongitude] = useState('');
    const [searchOption, setSearchOption] = useState('city');

    useEffect(() => {
        if(searchCity){
            fetchWeatherData()
        }
    },[])

    useEffect(() => {
        getLocation();
    },[])
    const getLocation = async() => {
        try{
            const { granted} = await Location.requestForegroundPermissionsAsync()
            if(!granted) return 

            const { coords:{latitude, longitude} } = await Location.getLastKnownPositionAsync()
            setLatitude(latitude)
            setLongitude(longitude)
            setLocation({latitude,longitude})
        }catch(error){
            console.error(error)
        }
        }
       


    const fetchWeatherData = async () => {
        try{
        const apiKey="cb24cf6a11f7bc95590f71abac2b11c2";
        const latitude = location.latitude
        const longitude =  location.longitude
        let baseURL = ``
        if(searchOption === "city"){
            baseURL = `https://api.openweathermap.org/data/2.5/forecast?q=${searchCity}&appid=${apiKey}`
        }else{
            baseURL =  `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}`;
        }
        const res = await axios.get(baseURL)
        setWeatherData(res.data)
     } catch(error){
        console.error('Err: ', error)
        }
}
    const handleCity = async () => {
        try {
            if (searchOption === "city" && searchCity.trim() !== '') {
                setSearchOption('city')
                fetchWeatherData();
            }else if(searchOption === "coordinates" && latitude.trim() !== '' && longitude.trim() !== ''){
                setSearchOption('coordinates')
                fetchWeatherData()
            }
        } catch (error) {
            console.error("Err: ", error.code);
        }
    };